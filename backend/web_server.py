#!/usr/bin/env python3
"""
FastAPI –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Any
from datetime import datetime
import json
import os
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from user_manager import UserManager

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–Ω—è", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ë–∞–∑–æ–≤–æ–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
security = HTTPBasic()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = UserManager()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class UserRegistration(BaseModel):
    username: str
    password: str
    email: str = ""

class UserLogin(BaseModel):
    username: str
    password: str

class DataRecord(BaseModel):
    kol_sna: float
    kolichestvo_sna_0: int
    nalichee_zarydki: int
    zavrrak_koloriy: int
    obed_koloriy: int
    chteniy: int
    sostavlenye_rasporydka: int
    ocenka_dny: int
    date: Optional[str] = None

class FieldDefinition(BaseModel):
    name: str
    display_name: str
    field_type: str  # "number", "boolean", "integer"
    min_value: Optional[float] = None
    max_value: Optional[float] = None
    description: str = ""

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ–ª–µ–π
FIELDS_CONFIG_FILE = "fields_config.json"

def load_fields_config() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π"""
    if os.path.exists(FIELDS_CONFIG_FILE):
        with open(FIELDS_CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
        default_fields = {
            "fields": [
                {
                    "name": "kol_sna",
                    "display_name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (—á–∞—Å—ã)",
                    "field_type": "number",
                    "min_value": 4.0,
                    "max_value": 12.0,
                    "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞"
                },
                {
                    "name": "kolichestvo_sna_0",
                    "display_name": "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –ø–æ—Å–ª–µ 00:00",
                    "field_type": "integer",
                    "min_value": 0,
                    "max_value": 10,
                    "description": "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏"
                },
                {
                    "name": "nalichee_zarydki",
                    "display_name": "–ù–∞–ª–∏—á–∏–µ –∑–∞—Ä—è–¥–∫–∏",
                    "field_type": "boolean",
                    "description": "–î–µ–ª–∞–ª–∏ –ª–∏ –∑–∞—Ä—è–¥–∫—É"
                },
                {
                    "name": "zavrrak_koloriy",
                    "display_name": "–ö–∞–ª–æ—Ä–∏–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
                    "field_type": "boolean",
                    "description": "–ë—ã–ª –ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"
                },
                {
                    "name": "obed_koloriy",
                    "display_name": "–ö–∞–ª–æ—Ä–∏–π–Ω—ã–π –æ–±–µ–¥",
                    "field_type": "boolean",
                    "description": "–ë—ã–ª –ª–∏ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π –æ–±–µ–¥"
                },
                {
                    "name": "chteniy",
                    "display_name": "–ß—Ç–µ–Ω–∏–µ",
                    "field_type": "boolean",
                    "description": "–ß–∏—Ç–∞–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è"
                },
                {
                    "name": "sostavlenye_rasporydka",
                    "display_name": "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞",
                    "field_type": "boolean",
                    "description": "–°–æ—Å—Ç–∞–≤–ª—è–ª–∏ –ª–∏ —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è"
                },
                {
                    "name": "ocenka_dny",
                    "display_name": "–û—Ü–µ–Ω–∫–∞ –¥–Ω—è",
                    "field_type": "integer",
                    "min_value": 1,
                    "max_value": 10,
                    "description": "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–Ω—è"
                }
            ]
        }
        save_fields_config(default_fields)
        return default_fields

def save_fields_config(config: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π"""
    with open(FIELDS_CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def get_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = user_manager.authenticate_user(credentials.username, credentials.password)
    if not result["success"]:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username

def calculate_correlations(df: pd.DataFrame) -> List[Dict]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –¥–Ω—è"""
    if df.empty or 'ocenka_dny' not in df.columns:
        return []
    
    correlations = df.corr()['ocenka_dny'].drop('ocenka_dny').sort_values(ascending=False)
    
    top_features = []
    for feature, corr in correlations.head(3).items():
        top_features.append({
            "feature": feature,
            "correlation": round(corr, 3),
            "impact": "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ" if corr > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ"
        })
    
    return top_features

# API endpoints

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        with open("static/index.html", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–Ω—è</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; text-align: center; }
                .api-section { margin: 20px 0; padding: 15px; background: #f9f9f9; border-radius: 5px; }
                .endpoint { background: #e3f2fd; padding: 10px; margin: 5px 0; border-radius: 3px; }
                .method { font-weight: bold; color: #1976d2; }
                .url { font-family: monospace; color: #333; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üè† –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –¥–Ω—è</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!</p>
                
                <div class="api-section">
                    <h2>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:</h2>
                    
                    <div class="endpoint">
                        <span class="method">POST</span> <span class="url">/register</span> - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">POST</span> <span class="url">/login</span> - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/users</span> - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/data</span> - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">POST</span> <span class="url">/data</span> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/stats</span> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">GET</span> <span class="url">/fields</span> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">POST</span> <span class="url">/fields</span> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                    </div>
                    
                    <div class="endpoint">
                        <span class="method">DELETE</span> <span class="url">/fields/{field_name}</span> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ
                    </div>
                </div>
                
                <div class="api-section">
                    <h2>üîß –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:</h2>
                    <p><a href="/docs" target="_blank">üìñ Swagger UI</a> - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</p>
                    <p><a href="/redoc" target="_blank">üìö ReDoc</a> - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</p>
                </div>
            </div>
        </body>
        </html>
        """

@app.post("/register")
async def register_user(user_data: UserRegistration):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = user_manager.register_user(user_data.username, user_data.password, user_data.email)
    if result["success"]:
        return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "user_id": result["user_id"]}
    else:
        raise HTTPException(status_code=400, detail=result["message"])

@app.post("/login")
async def login_user(user_data: UserLogin):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    result = user_manager.authenticate_user(user_data.username, user_data.password)
    if result["success"]:
        return {"message": "–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "user_id": result["user_id"]}
    else:
        raise HTTPException(status_code=401, detail=result["message"])

@app.get("/users")
async def list_users():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return {"users": user_manager.list_users()}

@app.get("/data")
async def get_user_data(username: str = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    df = user_manager.get_user_data(username)
    if df is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "username": username,
        "data": df.to_dict('records'),
        "total_records": len(df)
    }

@app.post("/data")
async def add_data_record(record: DataRecord, username: str = Depends(get_current_user)):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    record_dict = record.dict()
    if record_dict.get('date') is None:
        record_dict['date'] = datetime.now().strftime('%Y-%m-%d')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    success = user_manager.add_user_record(username, record_dict)
    if not success:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df = user_manager.get_user_data(username)
    correlations = calculate_correlations(df)
    
    return {
        "message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        "record": record_dict,
        "top_features": correlations
    }

@app.get("/stats")
async def get_user_stats(username: str = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = user_manager.get_user_stats(username)
    if "message" in stats:
        return {"message": stats["message"]}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    df = user_manager.get_user_data(username)
    correlations = calculate_correlations(df)
    
    return {
        **stats,
        "top_features": correlations
    }

@app.get("/fields")
async def get_fields():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π"""
    return load_fields_config()

@app.post("/fields")
async def add_field(field: FieldDefinition):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ"""
    config = load_fields_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_fields = [f["name"] for f in config["fields"]]
    if field.name in existing_fields:
        raise HTTPException(status_code=400, detail="–ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    field_dict = field.dict()
    config["fields"].append(field_dict)
    save_fields_config(config)
    
    return {"message": f"–ü–æ–ª–µ '{field.display_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "field": field_dict}

@app.delete("/fields/{field_name}")
async def delete_field(field_name: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ"""
    config = load_fields_config()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ–ª–µ
    field_to_remove = None
    for field in config["fields"]:
        if field["name"] == field_name:
            field_to_remove = field
            break
    
    if field_to_remove is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    required_fields = ["date", "ocenka_dny"]
    if field_name in required_fields:
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
    
    config["fields"] = [f for f in config["fields"] if f["name"] != field_name]
    save_fields_config(config)
    
    return {"message": f"–ü–æ–ª–µ '{field_to_remove['display_name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:4000")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:4000/docs")
    uvicorn.run(app, host="0.0.0.0", port=4000, reload=True)
